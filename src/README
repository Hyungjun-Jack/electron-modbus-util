1. jsmodbus/src/request/write-fc-105.jsmodbus


const ModbusRequestBody = require('jsmodbus/src/request/request-body')

/** Write FC105 Request Body
 * @extends ModbusRequestBody
 */
class WriteFc105RequestBody extends ModbusRequestBody {
  static fromBuffer (buffer) {
    try {
      const fc = buffer.readUInt8(0)
      const address = buffer.readUInt16BE(1)
      const duration = buffer.readUInt16BE(3)
      const value = buffer.readUInt8(5) === 0xff

      if (fc !== 105) {
        return null
      }

      return new WriteFc105RequestBody(address, duration, value)
    } catch (e) {
      return null
    }
  }

  /** Create a new Write Single Coil Request Body.
   * @param {Number} address Write address.
   * @param {Number} duration pulse duration.
   * @param {Boolean} value Value to be written.
   * @throws {InvalidStartAddressException} When address is larger than 0xFFFF.
   */
  constructor (address, duration, value) {
    super(105)
    if (address > 0xFFFF) {
      throw new Error('InvalidStartAddress')
    }
    this._address = address
    this._duration = duration
    this._value = value
  }

  /** Address to be written */
  get address () {
    return this._address
  }

  /** Value to be written */
  get value () {
    return this._value ? 0xFF : 0x00
  }

  get byteCount () {
    return 6
  }

  get name () {
    return 'WriteFc105'
  }

  createPayload () {
    const payload = Buffer.alloc(6)

    payload.writeUInt8(this._fc, 0) // function code
    payload.writeUInt16BE(this._address, 1) // output address
    payload.writeUInt16BE(this._duration, 3) // output address
    payload.writeUInt8(this._value ? 0xFF : 0x00, 5) // output value

    return payload
  }
}

module.exports = WriteFc105RequestBody


2. jsmodbus/src/response/write-fc-105.jsmodbus

const ModbusResponseBody = require('jsmodbus/src/response/response-body')

/** WriteFc105 Response Body (Function Code 105)
 * @extends ModbusResponseBody
 * @class
 */
class WriteFc105ResponseBody extends ModbusResponseBody {
  /** Create WriteFc105ResponseBody from Request
  * @param {WriteFc105RequestBody} request
  * @param {Buffer} coil
  * @returns WriteFc105ResponseBody
  */
  static fromRequest (requestBody) {
    const start = requestBody.address
    const duration = requestBody.duration
    const value = requestBody.value

    return new WriteFc105ResponseBody(start, duration, value)
  }

  static fromBuffer (buffer) {
    const fc = buffer.readUInt8(0)
    const start = buffer.readUInt16BE(1)
    const duration = buffer.readUInt16BE(3)
    const value = buffer.readUInt8(5)

    if (fc !== 105) {
      return null
    }

    return new WriteFc105ResponseBody(start, duration, value)
  }

  constructor (start, duration, value) {
    super(105)
    this._start = start
    this._duration = duration
    this._value = value
  }

  get start () {
    return this._start
  }

  get duration () {
    return this._duration
  }

  get value () {
    return this._value === 0xff
  }

  get byteCount () {
    return 6
  }

  createPayload () {
    const payload = Buffer.alloc(this.byteCount)

    payload.writeUInt8(this._fc, 0)
    payload.writeUInt16BE(this._start, 1)
    payload.writeUInt16BE(this._duration, 3)
    payload.writeUInt8(this._value, 5)

    return payload
  }
}

module.exports = WriteFc105ResponseBody

3. jsmodbus/src/modbus-client.jsmodbus

/** Execute WriteFc105 Request (Function Code 0x10)
   * @param {Number} address Address.
   * @param {Number} duration
   * @param {Boolean} value 
   * @returns {Promise}
   * @example
   * client.WriteFc105(10, 1000, true).then(function (res) {
   *   console.log(res.response, res.request)
   * }).catch(function (err) {
   *   ...
   * })
   */
  writeFc105 (start, duration, value) {
    debug('issuing new write fc105 request')

    let request
    try {
      request = new WriteFc105RequestBody(start, duration, value)
    } catch (e) {
      return Promise.reject(e)
    }

    return this._requestHandler.register(request)
  }

4. jsmodbus/src/response/response-factory.js

      /* Write fc 105 Response */
      if (fc === 105) {
        return WriteFc105Body.fromBuffer(buffer)
      }

4.1. jsmodbus/src/tcp-request.js
  -- transaction id, unit id를 조작하기 위해서 임의로 추가.
  set id (id) {
    this._id = id
  }

  set unitId (unitId) {
    this._unitId = unitId
  }

5. auto update
  - https://www.electron.build/auto-update
  - npm install --save electron-updater electron-log
  - https://github.com/iffy/electron-updater-example/blob/master/main.js
  - package.json 에 publish 설정 필요 없음.

  - 예제.
  const log = require("electron-log");
  const { autoUpdater } = require("electron-updater");

  //-------------------------------------------------------------------
  // Logging
  //
  // THIS SECTION IS NOT REQUIRED
  //
  // This logging setup is not required for auto-updates to work,
  // but it sure makes debugging easier :)
  //-------------------------------------------------------------------
  autoUpdater.logger = log;
  autoUpdater.logger.transports.file.level = "info";
  log.info("App starting...");

  // app.on("ready", 콜백함수에 createDefaultUpdaetWindow();autoUpdater.checkForUpdates(); 추가)

  //------------------------------------------------------------
  // For auto-update
  let updateWin;

  function sendStatusToWindow(text) {
    log.info(text);
    updateWin.webContents.send("message", text);
  }

  function createDefaultUpdaetWindow() {
    updateWin = new BrowserWindow({
      backgroundColor: "#eeeeee",
      webPreferences: { nodeIntegration: true },
    });
    updateWin.webContents.openDevTools();
    updateWin.on("closed", () => {
      updateWin = null;
    });
    updateWin.loadURL(`file://${__dirname}/version.html#v${app.getVersion()}`);
    return updateWin;
  }

  autoUpdater.on("checking-for-update", () => {
    sendStatusToWindow("Checking for update...");
  });
  autoUpdater.on("update-available", (info) => {
    sendStatusToWindow("Update available.");
  });
  autoUpdater.on("update-not-available", (info) => {
    sendStatusToWindow("Update not available.");
  });
  autoUpdater.on("error", (err) => {
    sendStatusToWindow("Error in auto-updater. " + err);
  });
  autoUpdater.on("download-progress", (progressObj) => {
    let log_message = "Download speed: " + progressObj.bytesPerSecond;
    log_message = log_message + " - Downloaded " + progressObj.percent + "%";
    log_message = log_message + " (" + progressObj.transferred + "/" + progressObj.total + ")";
    sendStatusToWindow(log_message);
  });
  autoUpdater.on("update-downloaded", (info) => {
    sendStatusToWindow("Update downloaded");
    autoUpdater.quitAndInstall();
  });
  //------------------------------------------------------------


  - GitHub에 릴리스파일 업로드
  * electron-builder가 만들어준 latest.yml도 같이 업로드 할 것.
  https://help.github.com/en/github/administering-a-repository/managing-releases-in-a-repository